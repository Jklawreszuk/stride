// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Stride.Metrics.ServerApp.Data;

#nullable disable

namespace Stride.Metrics.ServerApp.Migrations
{
    [DbContext(typeof(MetricDbContext))]
    [Migration("20230602195723_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Stride.Metrics.ServerApp.Models.IpToLocations", b =>
                {
                    b.Property<long>("IpFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IpFrom"));

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<long>("IpTo")
                        .HasColumnType("bigint");

                    b.HasKey("IpFrom");

                    b.HasIndex("IpFrom")
                        .IsUnique();

                    b.HasIndex("IpTo")
                        .IsUnique();

                    b.ToTable("IpToLocations");
                });

            modelBuilder.Entity("Stride.Metrics.ServerApp.Models.MetricCreated.MetricApp", b =>
                {
                    b.Property<int>("AppId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppId"));

                    b.Property<Guid>("AppGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AppName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.HasKey("AppId");

                    b.HasIndex("AppGuid")
                        .IsUnique();

                    b.HasIndex("AppName")
                        .IsUnique();

                    b.ToTable("MetricApps");
                });

            modelBuilder.Entity("Stride.Metrics.ServerApp.Models.MetricCreated.MetricEventDefinition", b =>
                {
                    b.Property<int>("MetricId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MetricId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<Guid>("MetricGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MetricName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("MetricId");

                    b.HasIndex("MetricGuid")
                        .IsUnique();

                    b.HasIndex("MetricName")
                        .IsUnique();

                    b.ToTable("MetricEventDefinitions");
                });

            modelBuilder.Entity("Stride.Metrics.ServerApp.Models.MetricCreated.MetricInstall", b =>
                {
                    b.Property<int>("InstallId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstallId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("InstallGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("InstallId");

                    b.HasIndex("InstallGuid")
                        .IsUnique();

                    b.ToTable("MetricInstalls");
                });

            modelBuilder.Entity("Stride.Metrics.ServerApp.Models.MetricCreated.MetricMarker", b =>
                {
                    b.Property<int>("MarkerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MarkerId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("MarkerGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("MarkerId");

                    b.HasIndex("MarkerGroupId");

                    b.ToTable("MetricMarkers");
                });

            modelBuilder.Entity("Stride.Metrics.ServerApp.Models.MetricCreated.MetricMarkerGroup", b =>
                {
                    b.Property<int>("MarkerGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MarkerGroupId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("MarkerGroupId");

                    b.ToTable("MetricMarkerGroups");
                });

            modelBuilder.Entity("Stride.Metrics.ServerApp.Models.MetricEvent", b =>
                {
                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("AppId")
                        .HasColumnType("int");

                    b.Property<int>("InstallId")
                        .HasColumnType("int");

                    b.Property<int>("SessionId")
                        .HasColumnType("int");

                    b.Property<int>("MetricId")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("IPAddress")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MetricValue")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Timestamp", "AppId", "InstallId", "SessionId", "MetricId");

                    b.HasIndex("AppId");

                    b.HasIndex("InstallId");

                    b.HasIndex("MetricId");

                    b.ToTable("MetricEvents");
                });

            modelBuilder.Entity("Stride.Metrics.ServerApp.Models.MetricCreated.MetricMarker", b =>
                {
                    b.HasOne("Stride.Metrics.ServerApp.Models.MetricCreated.MetricMarkerGroup", "MarkerGroup")
                        .WithMany()
                        .HasForeignKey("MarkerGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MarkerGroup");
                });

            modelBuilder.Entity("Stride.Metrics.ServerApp.Models.MetricEvent", b =>
                {
                    b.HasOne("Stride.Metrics.ServerApp.Models.MetricCreated.MetricApp", "App")
                        .WithMany()
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stride.Metrics.ServerApp.Models.MetricCreated.MetricInstall", "Install")
                        .WithMany()
                        .HasForeignKey("InstallId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stride.Metrics.ServerApp.Models.MetricCreated.MetricEventDefinition", "MetricEventDefinition")
                        .WithMany()
                        .HasForeignKey("MetricId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("App");

                    b.Navigation("Install");

                    b.Navigation("MetricEventDefinition");
                });
#pragma warning restore 612, 618
        }
    }
}
